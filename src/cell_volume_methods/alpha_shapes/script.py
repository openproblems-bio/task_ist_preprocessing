# import numpy as np
# import dask
import pandas as pd
import anndata as ad
import spatialdata as sd
import txsim as tx

## VIASH START
# Note: this section is auto-generated by viash at runtime. To edit it, make changes
# in config.vsh.yaml and then run `viash config inject config.vsh.yaml`.
par = {
  'input': 'assigned_transcripts.zarr',
  'alpha': 0.0, #The alpha parameter a, used to calculate the alpha shape, by default 0. If -1, optimal alpha parameter will be calculated.
  'output': 'cell_volumes.h5ad',
}
meta = {
  'name': 'alpha_shape',
}
## VIASH END


# Read input
print('Reading input files', flush=True)
sdata = sd.read_zarr(par['input'])

# Init AnnData object
print('Init AnnData object', flush=True)
cell_ids = sorted(sdata["transcripts"]["cell_id"].unique())
if cell_ids[0] == 0:
    cell_ids = cell_ids[1:]
adata = ad.AnnData(
    obs = pd.DataFrame(index=cell_ids, data={"cell_id": cell_ids}),
    uns = {"spots": sdata["transcripts"].compute()[["x","y","cell_id"]]}
)

# Calculate alpha shape area
print('Calculate alpha shape area', flush=True)
tx.preprocessing.calculate_alpha_area(adata=adata, alpha=par['alpha'], cell_id_col="cell_id")
adata.obs["volume"] = adata.obs["alpha_area"]

# TODO: Currently we actually calculate the area instead of the volume. Also we ignore the different z positions/layers.
#       We could improve the calculation with 1. taking into account the scaling in z direction and 2. calculating
#       polygons for each z layer and then summing up the volumes of the polygons.
#       Another option would be an alpha complex instead of an alpha shape. Ideally the x,y,z coordinates are 
#       transformed into physical space then first. There's a 3d option in https://pypi.org/project/alphashape/

# Write output
print('Write cell volumes h5ad', flush=True)
adata.write(par['output'])